92. Reverse Linked List II
Given the head of a singly linked list and two integers left and right where left <= right, reverse the nodes of the list from position left to position right, and return the reversed list.

Input: head = [1,2,3,4,5], left = 2, right = 4
Output: [1,4,3,2,5]

Solution:

# Definition for singly-linked list.
# class ListNode:
#     def __init__(self, val=0, next=None):
#         self.val = val
#         self.next = next
class Solution:
    def reverseBetween(self, head, m,n):
        if m==n: return head
        if m>1:
            newH = head
            newH.next = self.reverseBetween(head.next,m-1,n-1)
            return newH
        if m==1:
            newH = self.reverseBetween(head.next,1,n-1)
            nextnext = head.next.next
            head.next.next = head
            head.next = nextnext
            return newH
            
            
        

